params
params <- fit22$params
parametrization
constraints
params <- reform_constrained_pars(p=p, M=M, d=d, params=params, constraints=constraints)
alphas <- pick_alphas(p=p, M=M, d=d, params=params)
reg_means <- get_regime_means_int(p=p, M=M, d=d, params=params, parametrization=parametrization, constraints=constraints)
uncond_mean <- colSums(alphas*t(reg_means))
tmp <- colSums(alphas*t((reg_means - uncond_mean)^2))
reg_autocovs <- get_regime_autocovs_int(p=p, M=M, d=d, params=params, constraints=constraints)
reg_autocovs
get_regime_autocovs(fit22)
get_regime_autocovs(fit22)
get_regime_autocovs(fit22)
get_regime_autocovs(fit22c)
reg_autocovs
all_A <- pick_allA(p=p, M=M, d=d, params=params)
all_Omega <- pick_Omegas(p=p, M=M, d=d, params=params)
all_boldA <- form_boldA(p=p, M=M, d=d, all_A=all_A)
all_A
I_dp2 <- diag(nrow=(d*p)^2)
ZER_lower <- matrix(0, nrow=d*(p-1), ncol=d*p)
ZER_right <- matrix(0, nrow=d, ncol=d*(p-1))
all_Gammas <- array(NA, dim=c(d, d, p + 1, M)) # For each m=1,..,M, store the (dxd) covariance matrices Gamma_{y,m}(0),...,Gamma{y,m}(p-1),,Gamma{y,m}(p)
for(m in 1:M) {
# Calculate the (dpxdp) Gamma_{Y,m}(0) covariance matrix (Lutkepohl 2005, eq. (2.1.39))
kronmat <- I_dp2 - kronecker(all_boldA[, , m], all_boldA[, , m])
sigma_epsm <- rbind(cbind(all_Omega[, , m], ZER_right), ZER_lower)
Gamma_m <- matrix(solve(kronmat, vec(sigma_epsm)), nrow=d*p, ncol=d*p, byrow=FALSE)
# Obtain the Gamma_{y,m}(0),...,Gamma_{y,m}(p-1) covariance matrices from Gamma_{Y,m}(0)
all_Gammas[, , , m] <- c(as.vector(Gamma_m[1:d,]), rep(NA, d*d))
# Calculate the Gamma{y,m}(p) recursively from Gamma_{y,m}(0),...,Gamma_{y,m}(p-1) (Lutkepohl 2005, eq. (2.1.37))
all_Gammas[, , p + 1, m] <- rowSums(vapply(1:p, function(i1) all_A[, ,i1 , m]*all_Gammas[, , p + 1 - i1, m], numeric(d*d)))
}
all_Gammas
# Calculate the covariance matrices Sigma_{m,p} (Lutkepohl 2005, eq. (2.1.39))
I_dp2 <- diag(nrow=(d*p)^2)
ZER_lower <- matrix(0, nrow=d*(p-1), ncol=d*p)
ZER_right <- matrix(0, nrow=d, ncol=d*(p-1))
Sigmas <- array(NA, dim=c(d*p, d*p, M)) # Store the (dpxdp) covariance matrices
for(m in 1:M) {
kronmat <- I_dp2 - kronecker(all_boldA[, , m], all_boldA[, , m])
sigma_epsm <- rbind(cbind(all_Omega[, , m], ZER_right), ZER_lower)
Sigma_m <- solve(kronmat, vec(sigma_epsm))
Sigmas[, , m] <- Sigma_m
}
Sigmas
apply(aperm(alphas*aperm(reg_autocovs, c(4, 1, 2, 3)), c(2, 3, 4, 1)), 1:3, sum)
apply(aperm(c(1, 2)*aperm(a, c(4, 1, 2, 3)), c(2, 3, 4, 1)), 1:3, sum)
matrix(1:4, ncol=2)
apply(aperm(c(1, 2)*aperm(a, c(4, 1, 2, 3)), c(2, 3, 4, 1)), 1:3, sum) + matrix(1:4, ncol=2)
apply(aperm(alphas*aperm(reg_autocovs, c(4, 1, 2, 3)), c(2, 3, 4, 1)), 1:3, sum)
?apply
apply(a)
apply(a, 3, '+', 1)
apply(a, 1:2, '+', 1)
a
b <- apply(aperm(c(1, 2)*aperm(a, c(4, 1, 2, 3)), c(2, 3, 4, 1)), 1:3, sum)
b
apply(b, 1:2, '+', 1)
apply(b, 3, '+', 1)
apply(b, 1:2, '+', matrix(1:4, ncol=2))
apply(b, 1:2, mean)
apply(b, 3, mean)
apply(b, c(1, 3), mean)
apply(b, c(2, 3), mean)
apply(b, 1:2, '+')
apply(aperm(alphas*aperm(reg_autocovs, c(4, 1, 2, 3)), c(2, 3, 4, 1)), 1:3, sum)
apply(aperm(c(1, 2)*aperm(a, c(4, 1, 2, 3)), c(2, 3, 4, 1)), 1:3, sum)
apply(aperm(c(1, 2)*aperm(a, c(4, 1, 2, 3)), c(2, 3, 4, 1)), 1:3, sum) + 1:4
microbenchmark::microbenchmark(apply(aperm(alphas*aperm(reg_autocovs, c(4, 1, 2, 3)), c(2, 3, 4, 1)), 1:3, sum) )
tmp
(reg_means - uncond_mean)
?crossprod
tcrossprod(reg_means - uncond_mean)
(reg_means - uncond_mean)%*%t((reg_means - uncond_mean))
tcrossprod(reg_means - uncond_mean)
reg_means
uncond_mean
tcrossprod(reg_means[,1] - uncond_mean)
vapply(1:M, function(m) tcrossprod(reg_means[,m] - uncond_mean), numeric(d))
vapply(1:M, function(m) tcrossprod(reg_means[,m] - uncond_mean), numeric(d*d))
m=2
reg_means[,m] - uncond_mean
tcrossprod(reg_means[,m] - uncond_mean)
tcrossprod(reg_means[,m] - uncond_mean)
m=1
tcrossprod(reg_means[,m] - uncond_mean)
vapply(1:M, function(m) alphas[m]*tcrossprod(reg_means[,m] - uncond_mean), numeric(d*d))
tmp <- vapply(1:M, function(m) alphas[m]*tcrossprod(reg_means[,m] - uncond_mean), numeric(d*d)) # Each column stands for one vectorized matrix
reg_autocovs <- get_regime_autocovs_int(p=p, M=M, d=d, params=params, constraints=NULL)
apply(aperm(alphas*aperm(reg_autocovs, c(4, 1, 2, 3)), c(2, 3, 4, 1)), 1:3, sum)
reg_autocovs[, , , m]
alpha[m]*reg_autocovs[, , , m]
alphas[m]*reg_autocovs[, , , m]
a
a*0.5
alphas[m]*reg_autocovs[, , , m
]
vapply(1:M, function(m) alphas[m]*reg_autocovs[, , , m], numeric(d*d*(p + 1)))
apply(aperm(alphas*aperm(reg_autocovs, c(4, 1, 2, 3)), c(2, 3, 4, 1)), 1:3, sum)
array(vapply(1:M, function(m) alphas[m]*reg_autocovs[, , , m], numeric(d*d*(p + 1))), dim=c(d, d, p+1))
apply(aperm(alphas*aperm(reg_autocovs, c(4, 1, 2, 3)), c(2, 3, 4, 1)), 1:3, sum)
a1 <- array(vapply(1:M, function(m) alphas[m]*reg_autocovs[, , , m], numeric(d*d*(p + 1))), dim=c(d, d, p+1))
a2 <- apply(aperm(alphas*aperm(reg_autocovs, c(4, 1, 2, 3)), c(2, 3, 4, 1)), 1:3, sum)
a1 - a2
vapply(1:M, function(m) alphas[m]*reg_autocovs[, , , m], numeric(d*d*(p + 1)))
vapply(1:M, function(m) alphas[m]*reg_autocovs[, , , m], numeric(d*d*(p + 1)))
alphas[m]*reg_autocovs[, , , m]
a2
a1
a1 <- array(rowSums(vapply(1:M, function(m) alphas[m]*reg_autocovs[, , , m], numeric(d*d*(p + 1)))), dim=c(d, d, p+1))
a1
a1 - a2
microbenchmark::microbenchmark(array(rowSums(vapply(1:M, function(m) alphas[m]*reg_autocovs[, , , m], numeric(d*d*(p + 1)))), dim=c(d, d, p+1)),
apply(aperm(alphas*aperm(reg_autocovs, c(4, 1, 2, 3)), c(2, 3, 4, 1)), 1:3, sum))
vapply(1:M, function(m) alphas[m]*reg_autocovs[, , , m], numeric(d*d*(p + 1)))
rowSums(vapply(1:M, function(m) alphas[m]*reg_autocovs[, , , m], numeric(d*d*(p + 1))))
tmp
tmp <- rowSums(vapply(1:M, function(m) alphas[m]*tcrossprod(reg_means[,m] - uncond_mean), numeric(d*d))) # Vectorized matrix
tmp
rowSums(vapply(1:M, function(m) alphas[m]*reg_autocovs[, , , m], numeric(d*d*(p + 1))))
rowSums(vapply(1:M, function(m) alphas[m]*reg_autocovs[, , , m], numeric(d*d*(p + 1))))
1:8
1:8 + c(1, 2)
rowSums(vapply(1:M, function(m) alphas[m]*reg_autocovs[, , , m], numeric(d*d*(p + 1)))) + tmp
alphas[m]*reg_autocovs[, , , m]
rowSums(vapply(1:M, function(m) alphas[m]*reg_autocovs[, , , m], numeric(d*d*(p + 1))))
tmp
rowSums(vapply(1:M, function(m) alphas[m]*reg_autocovs[, , , m], numeric(d*d*(p + 1)))) + tmp
array(rowSums(vapply(1:M, function(m) alphas[m]*reg_autocovs[, , , m], numeric(d*d*(p + 1)))) + tmp, dim=c(d, d, p + 1))
all_autocovs <- array(rowSums(vapply(1:M, function(m) alphas[m]*reg_autocovs[, , , m], numeric(d*d*(p + 1)))) + tmp, dim=c(d, d, p + 1))
all_autocovs
all_autocovs[, , 1]
all_autocovs[, , -1]
all_autocovs[, , 1]
uncond_var <- all_autocovs[, , 1]
uncond_var
autocovs <- all_autocovs[, , -1]
autocovs
?cov2cor
cov2cor(uncond_var)
cov2cor(all_autocovs[, , 2])
cov2cor(all_autocovs[, , 3])
reg_autocovs
autocovs <- array(rowSums(vapply(1:M, function(m) alphas[m]*reg_autocovs[, , , m], numeric(d*d*(p + 1)))) + tmp, dim=c(d, d, p + 1))
autocovs
apply(autocovs, 3, cov2cor)
cov2cor(autocovs[, , i1]
)
i1 = 1
cov2cor(autocovs[, , i1])
vapply(1:(p + 1), function(i1) cov2cor(autocovs[, , i1]), numeric(d*d))
array(vapply(1:(p + 1), function(i1) cov2cor(autocovs[, , i1]), numeric(d*d)), dim=c(d, d, p + 1))
autocors <- array(vapply(1:(p + 1), function(i1) cov2cor(autocovs[, , i1]), numeric(d*d)), dim=c(d, d, p + 1))
uncond_mean
autocovs
devtools::document()
?uncond_moments_int
summary(fit22)
i1
autocovs[, , 1]
diag(autocovs[, , 1])
indvars <- diag(autocovs[, , 1])
indvars
ind_vars <- diag(autocovs[, , 1])
ind_vars
autocovs[, , 1]
acor_mat <- matrix(NA, nrow=d, ncol=d)
autocovs
i2=1
i3=3
autocovs[, , i1]
acor_mat <- matrix(NA, nrow=d, ncol=d)
for(i2 in d) {
for(i3 in d) {
acor_mat[i2, i3] <- autocovs[i2, i3, i1]/sqrt(ind_vars[i2]*ind_vars[i3])
}
}
acor_mat
acor_mat <- matrix(NA, nrow=d, ncol=d)
for(i2 in 1:d) {
for(i3 in 1:d) {
acor_mat[i2, i3] <- autocovs[i2, i3, i1]/sqrt(ind_vars[i2]*ind_vars[i3])
}
}
acor_mat
cov2cor(autocovs[, , i1])
autocors <- array(vapply(1:(p + 1), function(i1) {
acor_mat <- matrix(NA, nrow=d, ncol=d)
for(i2 in 1:d) {
for(i3 in 1:d) {
acor_mat[i2, i3] <- autocovs[i2, i3, i1]/sqrt(ind_vars[i2]*ind_vars[i3])
}
}
autocovs[, , i1]
},
numeric(d*d)), dim=c(d, d, p + 1))
autocors <- array(vapply(1:(p + 1), function(i1) {
acor_mat <- matrix(NA, nrow=d, ncol=d)
for(i2 in 1:d) {
for(i3 in 1:d) {
acor_mat[i2, i3] <- autocovs[i2, i3, i1]/sqrt(ind_vars[i2]*ind_vars[i3])
}
}
acor_mat
},
numeric(d*d)), dim=c(d, d, p + 1))
autocors
autocovs
reg_autocovs
all_A <- pick_allA(p=p, M=M, d=d, params=params)
all_Omega <- pick_Omegas(p=p, M=M, d=d, params=params)
all_boldA <- form_boldA(p=p, M=M, d=d, all_A=all_A)
all_A
fit22
m=1
# Calculate the (dpxdp) Gamma_{Y,m}(0) covariance matrix (Lutkepohl 2005, eq. (2.1.39))
kronmat <- I_dp2 - kronecker(all_boldA[, , m], all_boldA[, , m])
sigma_epsm <- rbind(cbind(all_Omega[, , m], ZER_right), ZER_lower)
Gamma_m <- matrix(solve(kronmat, vec(sigma_epsm)), nrow=d*p, ncol=d*p, byrow=FALSE)
Gamma_m
I_dp2 <- diag(nrow=(d*p)^2)
ZER_lower <- matrix(0, nrow=d*(p-1), ncol=d*p)
ZER_right <- matrix(0, nrow=d, ncol=d*(p-1))
all_Gammas <- array(NA, dim=c(d, d, p + 1, M))
# Obtain the Gamma_{y,m}(0),...,Gamma_{y,m}(p-1) covariance matrices from Gamma_{Y,m}(0)
all_Gammas[, , , m] <- c(as.vector(Gamma_m[1:d,]), rep(NA, d*d))
all_Gammas[, , , m]
rowSums(vapply(1:p, function(i1) all_A[, ,i1 , m]*all_Gammas[, , p + 1 - i1, m], numeric(d*d)))
?pick_allA
all_A[, , 1, m]
all_A[, , 1, m]*all_Gammas[, , 2, m] + all_A[, , 2, m]*all_Gammas[, , 1, m]
all_Gammas[, , 2, m]
all_A[, , 1, m]
all_A[, , 2, m]
all_A[, , 2, m]*all_Gammas[, , 1, m]
1.29216926*1382.0959 + -0.2814493*1384.8782
all_boldA
matrix(c(0.5, 0.4, 1, 0, 0.1, 0.5, 0, 1, 0, 0.25, 0, 0, 0, 0, 0), nrow=4)
matrix(c(0.5, 0.4, 1, 0, 0.1, 0.5, 0, 1, 0, 0.25, 0, 0, 0, 0, 0, 0), nrow=4)
all_boldA[, , 1] <- matrix(c(0.5, 0.4, 1, 0, 0.1, 0.5, 0, 1, 0, 0.25, 0, 0, 0, 0, 0, 0), nrow=4)
all_boldA
all_A
all_A[, , 1, 1] <- matrix(c(0.5, 0.4, 0.1, 0.5), nrow=2)
all_A[, , 2, 1] <- matrix(c(0, 0.25, 0, 0), nrow=2)
all_A
form_boldA(p=p, M=M, d=d, all_A=all_A)
all_boldA
all_Omega
all_Omega[, , 1] <- matrix(c(0.09, 0, 0.04, 0), nrow=2)
all_Omega
all_Omega[, , 1] <- matrix(c(0.09, 0, 0, 0.04), nrow=2)
all_Omega
m
# Calculate the (dpxdp) Gamma_{Y,m}(0) covariance matrix (Lutkepohl 2005, eq. (2.1.39))
kronmat <- I_dp2 - kronecker(all_boldA[, , m], all_boldA[, , m])
rbind(cbind(all_Omega[, , m], ZER_right), ZER_lower)
sigma_epsm <- rbind(cbind(all_Omega[, , m], ZER_right), ZER_lower)
Gamma_m <- matrix(solve(kronmat, vec(sigma_epsm)), nrow=d*p, ncol=d*p, byrow=FALSE)
Gamma_m
# Obtain the Gamma_{y,m}(0),...,Gamma_{y,m}(p-1) covariance matrices from Gamma_{Y,m}(0)
all_Gammas[, , , m] <- c(as.vector(Gamma_m[1:d,]), rep(NA, d*d))
all_Gammas[, , , m]
# Calculate the Gamma{y,m}(p) recursively from Gamma_{y,m}(0),...,Gamma_{y,m}(p-1) (Lutkepohl 2005, eq. (2.1.37))
all_A[, , 1, m]*all_Gammas[, , 2, m] + all_A[, , 2, m]*all_Gammas[, , 1, m]
all_A
all_A[, , 1, m]
all_A[, , 1, m]*all_Gammas[, , 2, m]
all_Gammas[, , 1, m]
all_A[, , 2, m]
all_A[, , 2, m]*all_Gammas[, , 1, m]
all_A[, , 1, m]*all_Gammas[, , 2, m] + all_A[, , 2, m]*all_Gammas[, , 1, m]
0.5*0.72
# Calculate the Gamma{y,m}(p) recursively from Gamma_{y,m}(0),...,Gamma_{y,m}(p-1) (Lutkepohl 2005, eq. (2.1.37))
all_A[, , 1, m]%*%all_Gammas[, , 2, m] + all_A[, , 2, m]%*%all_Gammas[, , 1, m]
all_Gammas[, , p + 1, m] <- rowSums(vapply(1:p, function(i1) all_A[, ,i1 , m]%*%all_Gammas[, , p + 1 - i1, m], numeric(d*d)))
all_Gammas[, , p + 1, m]
devtools::load_all()
params122 <- c(0.623, -0.129, 0.959, 0.089, -0.006, 1.006, 1.746,
0.804, 5.804, 3.245, 7.913, 0.952, -0.037, -0.019, 0.943, 6.926,
3.982, 12.135, 0.789)
mod122 <- GMVAR(p=1, M=2, d=2, params=params122)
get_regime_autocovs(mod122)
params <- fit22$params
params <- reform_constrained_pars(p=p, M=M, d=d, params=params, constraints=constraints) # Remove any constraints
alphas <- pick_alphas(p=p, M=M, d=d, params=params)
reg_means <- get_regime_means_int(p=p, M=M, d=d, params=params, parametrization=parametrization, constraints=NULL)
uncond_mean <- colSums(alphas*t(reg_means))
tmp <- rowSums(vapply(1:M, function(m) alphas[m]*tcrossprod(reg_means[,m] - uncond_mean), numeric(d*d))) # Vectorized matrix
reg_autocovs <- get_regime_autocovs_int(p=p, M=M, d=d, params=params, constraints=NULL)
autocovs <- array(rowSums(vapply(1:M, function(m) alphas[m]*reg_autocovs[, , , m], numeric(d*d*(p + 1)))) + tmp, dim=c(d, d, p + 1))
ind_vars <- diag(autocovs[, , 1])
autocors <- array(vapply(1:(p + 1), function(i1) {
acor_mat <- matrix(NA, nrow=d, ncol=d)
for(i2 in 1:d) {
for(i3 in 1:d) {
acor_mat[i2, i3] <- autocovs[i2, i3, i1]/sqrt(ind_vars[i2]*ind_vars[i3])
}
}
acor_mat
},
numeric(d*d)), dim=c(d, d, p + 1))
autocors
get_regime_autocovs_int(p=1, M=1, d=2, params=theta_112, parametrization="intercept", constraints=NULL)[, 2, 2, 1]
get_regime_autocovs_int(p=1, M=1, d=2, params=theta_112, constraints=NULL)[, 2, 2, 1]
get_regime_autocovs_int(p=1, M=2, d=2, params=theta_122, constraints=NULL)[, 1, 1, 2]
get_regime_autocovs_int(p=2, M=2, d=2, params=theta_222, constraints=NULL)[, 1, 3, 2]
get_regime_autocovs_int(p=3, M=3, d=2, params=theta_332, constraints=NULL)[2, , 4, 3]
get_regime_autocovs_int(p=1, M=2, d=3, params=theta_123, constraints=NULL)[1, , 2, 2]
get_regime_autocovs_int(p=2, M=1, d=3, params=theta_213, constraints=NULL)[, 3, 3, 1]
get_regime_autocovs_int(p=2, M=2, d=2, params=theta_222c, constraints=C_222)[, 1, 3, 2]
microbenchmark::microbenchmark(array(vapply(1:(p + 1), function(i1) {
acor_mat <- matrix(NA, nrow=d, ncol=d)
for(i2 in 1:d) {
for(i3 in 1:d) {
acor_mat[i2, i3] <- autocovs[i2, i3, i1]/sqrt(ind_vars[i2]*ind_vars[i3])
}
}
acor_mat
}, numeric(d*d)), dim=c(d, d, p + 1)))
uncond_moments_int(p=1, M=1, d=2, params=theta_112, parametrization="intercept", constraints=NULL)
uncond_moments_int(p=1, M=1, d=2, params=theta_112, parametrization="intercept", constraints=NULL)
devtools::load_all()
uncond_moments_int
View(uncond_moments_int)
rm(uncond_moments_int)
uncond_moments_int(p=1, M=1, d=2, params=theta_112, parametrization="intercept", constraints=NULL)
is_stationary(p=1, M=1, d=2, params=theta_112)
uncond_moments_int(p=1, M=1, d=2, params=theta_112, parametrization="intercept", constraints=NULL)
uncond_moments_int(p=1, M=1, d=2, params=theta_112, parametrization="intercept", constraints=NULL)$uncond_mean
uncond_moments_int(p=1, M=1, d=2, params=theta_112, parametrization="intercept", constraints=NULL)$autocors
uncond_moments_int(p=1, M=1, d=2, params=theta_112, parametrization="intercept", constraints=NULL)$autocors[, 1, 1]
get_regime_autocovs_int(p=1, M=1, d=2, params=theta_112, constraints=NULL)
is_stationary(1, 2, 2, theta_122)
is_stationary(2, 2, 2, theta_222)
A11_112 <- matrix(c(0.25, 0.06, 0.04, 0.34), nrow=2, byrow=FALSE)
Omega1_112 <- matrix(c(0.93, -0.15, -0.15, 5.20), nrow=2, byrow=FALSE)
theta_112 <- upsilon1_112 <- c(phi10_112, vec(A11_112), vech(Omega1_112))
is_stationary(1, 1, 2, theta_112)
# p=1, M=2, d=2
phi10_122 <- c(1.03, 2.36)
A11_122 <- matrix(c(0.1, -0.06, -0.04, 0.1), nrow=2, byrow=FALSE)
Omega1_122 <- matrix(c(0.93, -0.15, -0.15, 5.20), nrow=2, byrow=FALSE)
phi20_122 <- c(1.79, 3.00)
A21_122 <- A11_122
Omega2_122 <- matrix(c(5.88, 3.56, 3.56, 9.80), nrow=2, byrow=FALSE)
alpha1_122 <- 0.37
upsilon1_122 <- c(phi10_122, vec(A11_122), vech(Omega1_122))
upsilon2_122 <- c(phi20_122, vec(A21_122), vech(Omega2_122))
theta_122 <- c(upsilon1_122, upsilon2_122, alpha1_122)
is_stationary(1, 2, 2, theta_122)
is_stationary(3, 3, 2, theta_332)
phi10_332 <- c(1.03, 2.36)
A11_332 <- matrix(c(0.25, 0.06, 0.04, 0.34), nrow=2, byrow=FALSE)
A12_332 <- matrix(c(-0.29, -0.08, -0.05, -0.36), nrow=2, byrow=FALSE)
A13_332 <- matrix(c(0.1, 0.21, 0.12, 0.2), nrow=2, byrow=FALSE)
Omega1_332 <- matrix(c(0.93, -0.15, -0.15, 5.20), nrow=2, byrow=FALSE)
phi20_332 <- c(1.79, 3.00)
A21_332 <- matrix(c(0.20, 0.05, 0.05, 0.30), nrow=2, byrow=FALSE)
A22_332 <- matrix(c(-0.30, -0.10, -0.05, -0.40), nrow=2, byrow=FALSE)
A23_332 <- matrix(c(0.30, 0.10, 0.05, 0.40), nrow=2, byrow=FALSE)
Omega2_332 <- matrix(c(5.88, 3.56, 3.56, 9.80), nrow=2, byrow=FALSE)
phi30_332 <- c(1.79, 3.00)
A31_332 <- matrix(c(0.30, 0.03, 0.08, 0.33), nrow=2, byrow=FALSE)
A32_332 <- matrix(c(-0.50, -0.20, -0.01, -0.40), nrow=2, byrow=FALSE)
A33_332 <- matrix(c(0.50, 0.20, 0.01, 0.40), nrow=2, byrow=FALSE)
Omega3_332 <- matrix(c(5.00, 3.00, 3.00, 9.00), nrow=2, byrow=FALSE)
alpha1_332 <- 0.5
alpha2_332 <- 0.3
upsilon1_332 <- c(phi10_332, vec(A11_332), vec(A12_332), vec(A13_332), vech(Omega1_332))
upsilon2_332 <- c(phi20_332, vec(A21_332), vec(A22_332), vec(A23_332), vech(Omega2_332))
upsilon3_332 <- c(phi30_332, vec(A31_332), vec(A32_332), vec(A33_332), vech(Omega3_332))
theta_332 <- c(upsilon1_332, upsilon2_332, upsilon3_332, alpha1_332, alpha2_332)
is_stationary(3, 3, 2, theta_332)
is_stationary(1, 2, 3, theta_123)
phi10_123 <- c(1.1, 2.2, 3.3)
A11_123 <- matrix(c(0.1, 0.21, 0.31, 0.12, 0.2, 0.32, 0.13, 0.23, 0.3), nrow=3, byrow=FALSE)
Omega1_123 <- matrix(c(1, 0.22, 0.33, 0.22, 2, 0.44, 0.33, 0.44, 3), nrow=3, byrow=FALSE)
phi20_123 <- c(1.11, 2.22, 3.33)
A21_123 <- matrix(c(-0.1, -0.21, -0.31, -0.12, -0.2, -0.32, -0.13, -0.23, -0.3), nrow=3, byrow=FALSE)
Omega2_123 <- matrix(c(1.1, 0.222, 0.333, 0.222, 2.2, 0.444, 0.333, 0.444, 3.3), nrow=3, byrow=FALSE)
alpha1_123 <- 0.6
upsilon1_123 <- c(phi10_123, vec(A11_123), vech(Omega1_123))
upsilon2_123 <- c(phi20_123, vec(A21_123), vech(Omega2_123))
is_stationary(1, 2, 3, theta_123)
theta_123 <- c(upsilon1_123, upsilon2_123, alpha1_123)
is_stationary(1, 2, 3, theta_123)
is_stationary(2, 1, 3, theta_213)
phi10_213 <- c(1.1, 2.2, 3.3)
A11_213 <- matrix(c(0.1, 0.21, 0.31, 0.12, 0.2, 0.32, 0.13, 0.23, 0.3), nrow=3, byrow=FALSE)
A12_213 <- matrix(c(-0.1, -0.21, -0.31, -0.12, -0.2, -0.32, -0.13, -0.23, -0.3), nrow=3, byrow=FALSE)
Omega1_213 <- matrix(c(1, 0.22, 0.33, 0.22, 2, 0.44, 0.33, 0.44, 3), nrow=3, byrow=FALSE)
upsilon1_213 <- c(phi10_213, vec(A11_213), vec(A12_213), vech(Omega1_213))
theta_213 <- upsilon1_213
is_stationary(2, 1, 3, theta_213)
get_regime_autocovs_int(p=1, M=1, d=2, params=theta_112, constraints=NULL)[, 2, 2, 1]
get_regime_autocovs_int(p=1, M=1, d=2, params=theta_112, constraints=NULL)
get_regime_autocovs_int(p=1, M=2, d=2, params=theta_122, constraints=NULL)
get_regime_autocovs_int(p=1, M=2, d=2, params=theta_122, constraints=NULL)[, 1, 1, 2]
get_regime_autocovs_int(p=2, M=2, d=2, params=theta_222, constraints=NULL)[, 1, 3, 2]
get_regime_autocovs_int(p=3, M=3, d=2, params=theta_332, constraints=NULL)[2, , 4, 3]
get_regime_autocovs_int(p=1, M=2, d=3, params=theta_123, constraints=NULL)[1, , 2, 2]
get_regime_autocovs_int(p=1, M=2, d=3, params=theta_123, constraints=NULL)
get_regime_autocovs_int(p=2, M=1, d=3, params=theta_213, constraints=NULL)[, 3, 3, 1]
get_regime_autocovs_int(p=2, M=2, d=2, params=theta_222c, constraints=C_222)[, 1, 3, 2]
uncond_moments_int(p=1, M=1, d=2, params=theta_112, parametrization="intercept", constraints=NULL)$uncond_mean
uncond_moments_int(p=1, M=1, d=2, params=theta_112, parametrization="intercept", constraints=NULL)$autocors
uncond_moments_int(p=1, M=1, d=2, params=theta_112, parametrization="intercept", constraints=NULL)$autocors[, 1, 1]
uncond_moments_int(p=1, M=2, d=2, params=theta_122, parametrization="intercept", constraints=NULL)$uncond_mean
uncond_moments_int(p=1, M=2, d=2, params=theta_122, parametrization="intercept", constraints=NULL)$autocors
(uncond_moments_int(p=1, M=2, d=2, params=theta_122, parametrization="intercept", constraints=NULL)$autocors[, 2, 2]
uncond_moments_int(p=1, M=2, d=2, params=theta_122, parametrization="intercept", constraints=NULL)$autocors[, 2, 2]
uncond_moments_int(p=1, M=2, d=2, params=theta_122, parametrization="intercept", constraints=NULL)$autocors[, 2, 2]
uncond_moments_int(p=2, M=2, d=2, params=theta_222, parametrization="intercept", constraints=NULL)$uncond_mean
uncond_moments_int(p=2, M=2, d=2, params=theta_222, parametrization="intercept", constraints=NULL)$autocors
uncond_moments_int(p=2, M=2, d=2, params=theta_222, parametrization="intercept", constraints=NULL)$autocors[1, , 3]
uncond_moments_int(p=3, M=3, d=2, params=theta_332, parametrization="intercept", constraints=NULL)$uncond_mean
uncond_moments_int(p=3, M=3, d=2, params=theta_332, parametrization="intercept", constraints=NULL)$autocors
uncond_moments_int(p=3, M=3, d=2, params=theta_332, parametrization="intercept", constraints=NULL)$autocors[2, , 2]
uncond_moments_int(p=1, M=2, d=3, params=theta_123, parametrization="intercept", constraints=NULL)$uncond_mean
uncond_moments_int(p=1, M=2, d=3, params=theta_123, parametrization="intercept", constraints=NULL)$autocors
uncond_moments_int(p=1, M=2, d=3, params=theta_123, parametrization="intercept", constraints=NULL)$autocors[, 3, 1]
uncond_moments_int(p=2, M=1, d=3, params=theta_213, parametrization="intercept", constraints=NULL)$uncond_mean
uncond_moments_int(p=2, M=1, d=3, params=theta_213, parametrization="intercept", constraints=NULL)$autocors
uncond_moments_int(p=2, M=1, d=3, params=theta_213, parametrization="intercept", constraints=NULL)$autocors[3, , 3]
uncond_moments_int(p=2, M=2, d=2, params=theta_222c, parametrization="intercept", constraints=C_222)$uncond_mean
uncond_moments_int(p=2, M=2, d=2, params=theta_222c, parametrization="intercept", constraints=C_222)$autocors
uncond_moments_int(p=2, M=2, d=2, params=theta_222c, parametrization="intercept", constraints=C_222)$autocors[, 2, 1]
devtools::test()
params122 <- c(0.623, -0.129, 0.959, 0.089, -0.006, 1.006, 1.746,
0.804, 5.804, 3.245, 7.913, 0.952, -0.037, -0.019, 0.943, 6.926,
3.982, 12.135, 0.789)
mod122 <- GMVAR(p=1, M=2, d=2, params=params122)
devtools::load_all()
uncond_moments(mod122)
params222c <- c(1.031, 2.356, 1.786, 3.000, 1.250, 0.060, 0.036,
1.335, -0.290, -0.083, -0.047, -0.356, 0.934, -0.152, 5.201, 5.883,
3.560, 9.799, 0.368)
mod222c <- GMVAR(p=2, M=2, d=2, params=params222c, constraints=C_mat)
uncond_moments(mod222c)
devtools::document()
uncond_moments(mod222c)
?uncond_moment
?uncond_moments
devtools::document()
devtools::document()
devtools::load_all()
tmp <- matrix(c(1, rep(0, 10), 1, rep(0, 8), 1, rep(0, 10), 1),
nrow=2*2^2, byrow=FALSE)
C_mat2 <- rbind(tmp, tmp)
params222c2 <- c(0.355, 3.193, -0.114, 2.829, 1.263, 1.338, -0.292,
-0.362, 5.597, 3.456, 9.622, 0.982, -0.327, 5.236, 0.650)
mod222c2 <- GMVAR(data, p=2, M=2, params=params222c2,
constraints=C_mat2)
mod222c2
mod222c2$uncond_moments
print_std_errors(mod222c2)
?GMVAR
devtools::load_all()
fit22 <- fitGMVAR(data, p=2, M=2, parametrization="mean")
devtools::load_all()
fit22 <- fitGMVAR(data, p=2, M=2, parametrization="mean")
devtools::load_all()
fit22 <- fitGMVAR(data, p=2, M=2, parametrization="mean")
data
p
M
conditional <- TRUE
parametrization="intercept"
constraints
ncalls
ncalls <- 4
ncores <- 4
ncalls <- 8
maxit <- 300
data <- check_data(data=data, p=p)
d <- ncol(data)
n_obs <- nrow(data)
npars <- n_params(p=p, M=M, d=d, constraints=constraints)
dot_params <- list(...)
minval <- ifelse(is.null(dot_params$minval), -(10^(ceiling(log10(n_obs)) + d) - 1), dot_params$minval)
minval <- -(10^(ceiling(log10(n_obs)) + d) - 1)
red_criteria <- c(0.05, 0.01)
### Genetic algorithm optimization ###
cl <- parallel::makeCluster(ncores)
parallel::clusterExport(cl, ls(environment(fitGMVAR)), envir = environment(fitGMVAR)) # assign all variables from package:gmvarkit
parallel::clusterEvalQ(cl, c(library(Brobdingnag), library(mvnfast), library(pbapply)))
cat("Optimizing with genetic algorithm...", "\n")
GAresults <- pbapply::pblapply(1:ncalls, function(x) GAfit(data=data, p=p, M=M, conditional=conditional, parametrization=parametrization,
constraints=constraints, ...), cl=cl)
GAresults <- pbapply::pblapply(1:ncalls, function(x) GAfit(data=data, p=p, M=M, conditional=conditional, parametrization=parametrization,
constraints=constraints), cl=cl)
parallel::stopCluster(cl=cl)
closeAllConnections()
GAresults <- lapply(1:3, function(x) GAfit(data=data, p=p, M=M, conditional=conditional, parametrization=parametrization,
constraints=constraints)
)
options(warn=2)
GAresults <- lapply(1:1, function(x) GAfit(data=data, p=p, M=M, conditional=conditional, parametrization=parametrization,
constraints=constraints)
)
?options
getOption()
getOption(warn)
getOption("warn")
options(warn=3)
getOption("warn")
GAresults <- lapply(1:1, function(x) GAfit(data=data, p=p, M=M, conditional=conditional, parametrization=parametrization,
constraints=constraints))
GAresutls
GAresults
